{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs/internal/observable/of';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SvgServiceService {\n  constructor(http) {\n    this.http = http;\n    this.backend_URI = \"http://localhost:8000\";\n  }\n  post(graphRequest) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const options = {\n      headers\n    };\n    const resp = this.http.post(this.backend_URI + \"/clingviz/\", graphRequest, {\n      ...headers\n    }).pipe(catchError((error, caught) => {\n      // Handle the error here (e.g., log it or throw a custom error)\n      console.error('Error occurred during the HTTP request:', error);\n      return of(error);\n    }));\n    return resp;\n  }\n}\nSvgServiceService.ɵfac = function SvgServiceService_Factory(t) {\n  return new (t || SvgServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nSvgServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SvgServiceService,\n  factory: SvgServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","catchError","of","SvgServiceService","constructor","http","backend_URI","post","graphRequest","headers","options","resp","pipe","error","caught","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Program Files (x86)\\Potassco\\ClinGraphViz\\ClinGraphViz\\Frontend\\ClinGraphViz\\src\\app\\svg-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { GraphData, GraphRequest } from './types/graph_request';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { of } from 'rxjs/internal/observable/of';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SvgServiceService {\r\n\r\n  constructor(\r\n    private http: HttpClient) { }\r\n\r\n    private backend_URI = \"http://localhost:8000\"\r\n\r\n    post(graphRequest:GraphRequest): Observable<GraphData>{\r\n      const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n      const options = { headers }\r\n      const resp = this.http.post<GraphData>(this.backend_URI+\"/clingviz/\",graphRequest,{...headers})\r\n      \r\n      .pipe(\r\n        catchError((error,caught) => {\r\n          // Handle the error here (e.g., log it or throw a custom error)\r\n          console.error('Error occurred during the HTTP request:', error);\r\n          return of(error)\r\n        })\r\n      );\r\n      return resp; \r\n    } \r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,QAAkB,gBAAgB;AAErD,SAASC,EAAE,QAAQ,6BAA6B;;;AAKhD,OAAM,MAAOC,iBAAiB;EAE5BC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAEJ,KAAAC,WAAW,GAAG,uBAAuB;EAFjB;EAI5BC,IAAIA,CAACC,YAAyB;IAC5B,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,MAAMU,OAAO,GAAG;MAAED;IAAO,CAAE;IAC3B,MAAME,IAAI,GAAG,IAAI,CAACN,IAAI,CAACE,IAAI,CAAY,IAAI,CAACD,WAAW,GAAC,YAAY,EAACE,YAAY,EAAC;MAAC,GAAGC;IAAO,CAAC,CAAC,CAE9FG,IAAI,CACHX,UAAU,CAAC,CAACY,KAAK,EAACC,MAAM,KAAI;MAC1B;MACAC,OAAO,CAACF,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,OAAOX,EAAE,CAACW,KAAK,CAAC;IAClB,CAAC,CAAC,CACH;IACD,OAAOF,IAAI;EACb;;AApBSR,iBAAiB,C;mBAAjBA,iBAAiB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAjBhB,iBAAiB,C;SAAjBA,iBAAiB;EAAAiB,OAAA,EAAjBjB,iBAAiB,CAAAkB,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}